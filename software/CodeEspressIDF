#include <stdio.h>
#include "string.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_system.h"
#include "esp_http_server.h"
#include "nvs_flash.h"
#include "DHT11.h"  // Necesitas agregar la librería DHT para ESP-IDF
#include "esp_netif.h"

// Definiciones de pines
#define LED_PIN GPIO_NUM_2
#define RELAY_PIN GPIO_NUM_4
#define SOIL_SENSOR_PIN GPIO_NUM_12
#define DHT_PIN GPIO_NUM_16

#define WIFI_SSID "WifiNoha"
#define WIFI_PASSWORD "noha12345"

// Inicialización de la biblioteca DHT
DHT11 dht(DHT_PIN, DHT_TYPE);

// Prototipos de funciones
esp_err_t root_get_handler(httpd_req_t *req);
esp_err_t on_get_handler(httpd_req_t *req);
esp_err_t off_get_handler(httpd_req_t *req);
void wifi_init_sta();
void start_webserver();

httpd_handle_t server = NULL;

void app_main(void)
{
    // Inicializar NVS (necesario para WiFi)
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inicializar WiFi
    wifi_init_sta();

    // Configurar pines
    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);
    gpio_set_direction(RELAY_PIN, GPIO_MODE_OUTPUT);
    gpio_set_direction(SOIL_SENSOR_PIN, GPIO_MODE_INPUT);

    // Iniciar el servidor web
    start_webserver();
}

void wifi_init_sta()
{
    // Inicializar la red WiFi
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_sta();
    
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);
    esp_wifi_set_storage(WIFI_STORAGE_RAM);

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASSWORD,
        },
    };
    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(WIFI_IF_STA, &wifi_config);
    esp_wifi_start();
    esp_wifi_connect();
    ESP_LOGI("wifi", "Conectando a %s...", WIFI_SSID);

    // Esperar la conexión
    while (esp_wifi_connect() != ESP_OK) {
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
    ESP_LOGI("wifi", "Conectado a WiFi");
}

esp_err_t root_get_handler(httpd_req_t *req)
{
    char html_buffer[512];
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int soil_moisture = gpio_get_level(SOIL_SENSOR_PIN);

    if (isnan(temperature) || isnan(humidity)) {
        temperature = 0;
        humidity = 0;
    }

    snprintf(html_buffer, sizeof(html_buffer),
        "<html><body><h1>Control de Motor</h1>"
        "<button onclick=\"location.href='/on'\">ON</button>"
        "<button onclick=\"location.href='/off'\">OFF</button>"
        "<p>Temperatura: %.2f °C</p>"
        "<p>Humedad: %.2f %%</p>"
        "<p>Humedad del Suelo: %s</p>"
        "</body></html>",
        temperature, humidity, soil_moisture == 1 ? "Seco" : "Húmedo");

    httpd_resp_send(req, html_buffer, strlen(html_buffer));
    return ESP_OK;
}

esp_err_t on_get_handler(httpd_req_t *req)
{
    gpio_set_level(LED_PIN, 0);  // Encender el LED
    gpio_set_level(RELAY_PIN, 0);  // Encender el relé
    httpd_resp_send(req, "Motor encendido", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t off_get_handler(httpd_req_t *req)
{
    gpio_set_level(RELAY_PIN, 1);  // Apagar el relé
    gpio_set_level(LED_PIN, 1);  // Apagar el LED
    httpd_resp_send(req, "Motor apagado", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

void start_webserver()
{
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();

    // Configurar el servidor web
    httpd_uri_t root_uri = {
        .uri = "/",
        .method = HTTP_GET,
        .handler = root_get_handler,
        .user_ctx = NULL
    };
    httpd_uri_t on_uri = {
        .uri = "/on",
        .method = HTTP_GET,
        .handler = on_get_handler,
        .user_ctx = NULL
    };
    httpd_uri_t off_uri = {
        .uri = "/off",
        .method = HTTP_GET,
        .handler = off_get_handler,
        .user_ctx = NULL
    };

    // Iniciar el servidor
    ESP_ERROR_CHECK(httpd_start(&server, &config));
    ESP_ERROR_CHECK(httpd_register_uri_handler(server, &root_uri));
    ESP_ERROR_CHECK(httpd_register_uri_handler(server, &on_uri));
    ESP_ERROR_CHECK(httpd_register_uri_handler(server, &off_uri));
}

