#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_log.h"
#include "http_server.h"
#include "driver/gpio.h"
#include "dht.h"  // Librería para el sensor DHT11

static const char *TAG = "ESP_SERVER";

const char *ssid = "WifiNoha";
const char *password = "noha12345";

#define RELAY_PIN1 GPIO_NUM_2   // Relé 1 en el pin D2
#define RELAY_PIN2 GPIO_NUM_0   // Relé 2 en el pin D3 (cambia si es necesario)
#define SENSOR_PIN_DHT GPIO_NUM_11  // Pin para el sensor DHT11
#define SENSOR_PIN_FC28 GPIO_NUM_14 // Pin para el sensor FC-28

// Definir el tipo de sensor y el pin
#define DHT_TYPE DHT_TYPE_AM2302  // DHT11
#define DHT_PIN SENSOR_PIN_DHT    // Pin de lectura DHT11

void wifi_init(void);
void http_server_init(void);
void relay_control(int relay_num, int state);
float read_temperature(void);
float read_humidity(void);
int read_soil_humidity(void);

void app_main(void) {
    nvs_flash_init();
    wifi_init();
    http_server_init();
    
    gpio_set_direction(RELAY_PIN1, GPIO_MODE_OUTPUT);  // Configura el relé 1
    gpio_set_direction(RELAY_PIN2, GPIO_MODE_OUTPUT);  // Configura el relé 2
    gpio_set_level(RELAY_PIN1, 1); // Inicializar el relé 1 en estado de "normalmente abierto" (NO)
    gpio_set_level(RELAY_PIN2, 1); // Inicializar el relé 2 en estado de "normalmente abierto" (NO)

    gpio_set_direction(SENSOR_PIN_FC28, GPIO_MODE_INPUT);  // Configura el pin para el sensor FC-28
}

void wifi_init(void) {
    esp_event_loop_create_default();
    
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(WIFI_IF_STA, &(wifi_config_t){
        .sta = {
            .ssid = "WifiNoha",
            .password = "noha12345",
        },
    });

    esp_wifi_start();
    esp_wifi_connect();
    ESP_LOGI(TAG, "Conectando a WiFi...");
}

void http_server_init(void) {
    // Inicializa el servidor HTTP
    start_http_server();
}

void relay_control(int relay_num, int state) {
    if (relay_num == 1) {
        gpio_set_level(RELAY_PIN1, state);
    } else if (relay_num == 2) {
        gpio_set_level(RELAY_PIN2, state);
    }
}

// Función para leer la temperatura desde el DHT11
float read_temperature(void) {
    int16_t temperature = 0;
    int16_t humidity = 0;
    if (dht_read_data(DHT_TYPE, DHT_PIN, &humidity, &temperature) == ESP_OK) {
        ESP_LOGI(TAG, "Temperatura: %d C, Humedad: %d %%", temperature, humidity);
        return (float)temperature;
    } else {
        ESP_LOGE(TAG, "Error al leer el sensor DHT11");
        return -1; // Indicar error
    }
}

// Función para leer la humedad desde el DHT11
float read_humidity(void) {
    int16_t temperature = 0;
    int16_t humidity = 0;
    if (dht_read_data(DHT_TYPE, DHT_PIN, &humidity, &temperature) == ESP_OK) {
        ESP_LOGI(TAG, "Temperatura: %d C, Humedad: %d %%", temperature, humidity);
        return (float)humidity;
    } else {
        ESP_LOGE(TAG, "Error al leer el sensor DHT11");
        return -1; // Indicar error
    }
}

// Función para leer la humedad del suelo con el FC-28
int read_soil_humidity(void) {
    int soil_value = gpio_get_level(SENSOR_PIN_FC28);  // Leer el valor digital (0 o 1) del FC-28
    if (soil_value == -1) {
        ESP_LOGE(TAG, "Error al leer el sensor de humedad del suelo FC-28");
        return -1;  // Error de lectura
    }
    ESP_LOGI(TAG, "Valor de humedad del suelo: %d", soil_value);
    return soil_value;  // 0 es húmedo, 1 es seco
}

// Aquí se agregaría la implementación del servidor HTTP
void start_http_server(void) {
    httpd_handle_t server = NULL;

    httpd_config_t config = {
        .max_uri_handlers = 10,
        .stack_size = 4096,
        .server_port = 80,
        .ctrl_port = 32768,
        .task_priority = 5,
        .task_core = 1,
        .task_stack_size = 2048,
    };

    httpd_uri_t root_uri = {
        .uri = "/",
        .method = HTTP_GET,
        .handler = handle_root,
        .user_ctx = NULL
    };

    httpd_uri_t on_uri_1 = {
        .uri = "/on1",
        .method = HTTP_GET,
        .handler = handle_on_1,
        .user_ctx = NULL
    };

    httpd_uri_t off_uri_1 = {
        .uri = "/off1",
        .method = HTTP_GET,
        .handler = handle_off_1,
        .user_ctx = NULL
    };

    httpd_uri_t on_uri_2 = {
        .uri = "/on2",
        .method = HTTP_GET,
        .handler = handle_on_2,
        .user_ctx = NULL
    };

    httpd_uri_t off_uri_2 = {
        .uri = "/off2",
        .method = HTTP_GET,
        .handler = handle_off_2,
        .user_ctx = NULL
    };

    httpd_uri_t humedad_uri = {
        .uri = "/humedad",
        .method = HTTP_GET,
        .handler = handle_humedad,
        .user_ctx = NULL
    };

    httpd_uri_t temperatura_uri = {
        .uri = "/temperatura",
        .method = HTTP_GET,
        .handler = handle_temperatura,
        .user_ctx = NULL
    };

    httpd_uri_t humedad_suelo_uri = {
        .uri = "/humedad_suelo",
        .method = HTTP_GET,
        .handler = handle_humedad_suelo,
        .user_ctx = NULL
    };

    // Iniciar el servidor
    if (httpd_start(&server, &config) == ESP_OK) {
        httpd_register_uri_handler(server, &root_uri);
        httpd_register_uri_handler(server, &on_uri_1);
        httpd_register_uri_handler(server, &off_uri_1);
        httpd_register_uri_handler(server, &on_uri_2);
        httpd_register_uri_handler(server, &off_uri_2);
        httpd_register_uri_handler(server, &humedad_uri);
        httpd_register_uri_handler(server, &temperatura_uri);
        httpd_register_uri_handler(server, &humedad_suelo_uri);
    }
}

esp_err_t handle_root(httpd_req_t *req) {
    const char *html = "<html><body><h1>Control de Motores</h1>"
                       "<button onclick=\"location.href='/on1'\">ON Relé 1</button>"
                       "<button onclick=\"location.href='/off1'\">OFF Relé 1</button>"
                       "<br><br>"
                       "<button onclick=\"location.href='/on2'\">ON Relé 2</button>"
                       "<button onclick=\"location.href='/off2'\">OFF Relé 2</button>"
                       "<h2>Temperatura: <span id='temperatura'>Cargando...</span></h2>"
                       "<h2>Humedad: <span id='humedad'>Cargando...</span></h2>"
                       "<h2>Humedad del Suelo: <span id='humedad_suelo'>Cargando...</span></h2>"
                       "<script>setInterval(function(){fetch('/temperatura').then(response => response.text()).then(data => document.getElementById('temperatura').innerText = data);}, 2000);"
                       "setInterval(function(){fetch('/humedad').then(response => response.text()).then(data => document.getElementById('humedad').innerText = data);}, 2000);"
                       "setInterval(function(){fetch('/humedad_suelo').then(response => response.text()).then(data => document.getElementById('humedad_suelo').innerText = data);}, 2000);</script>"
                       "</body></html>";
    
    httpd_resp_send(req, html, strlen(html));
    return ESP_OK;
}

esp_err_t handle_on_1(httpd_req_t *req) {
    relay_control(1, 0); // Encender el relé 1
    httpd_resp_send(req, "Relé 1 encendido", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_off_1(httpd_req_t *req) {
    relay_control(1, 1); // Apagar el relé 1
    httpd_resp_send(req, "Relé 1 apagado", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_on_2(httpd_req_t *req) {
    relay_control(2, 0); // Encender el relé 2
    httpd_resp_send(req, "Relé 2 encendido", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_off_2(httpd_req_t *req) {
    relay_control(2, 1); // Apagar el relé 2
    httpd_resp_send(req, "Relé 2 apagado", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_humedad(httpd_req_t *req) {
    float humedad = read_humidity(); // Leer la humedad desde el DHT11
    if (humedad == -1) {
        httpd_resp_send(req, "Error leyendo humedad", HTTPD_RESP_USE_STRLEN);
    } else {
        char buffer[50];
        snprintf(buffer, sizeof(buffer), "%.2f %%", humedad);
        httpd_resp_send(req, buffer, HTTPD_RESP_USE_STRLEN);
    }
    return ESP_OK;
}

esp_err_t handle_temperatura(httpd_req_t *req) {
    float temperatura = read_temperature(); // Leer la temperatura desde el DHT11
    if (temperatura == -1) {
        httpd_resp_send(req, "Error leyendo temperatura", HTTPD_RESP_USE_STRLEN);
    } else {
        char buffer[50];
        snprintf(buffer, sizeof(buffer), "%.2f C", temperatura);
        httpd_resp_send(req, buffer, HTTPD_RESP_USE_STRLEN);
    }
    return ESP_OK;
}

esp_err_t handle_humedad_suelo(httpd_req_t *req) {
    int humedad_suelo = read_soil_humidity(); // Leer la humedad del suelo desde el FC-28
    if (humedad_suelo == -1) {
        httpd_resp_send(req, "Error leyendo humedad del suelo", HTTPD_RESP_USE_STRLEN);
    } else {
        const char *estado = humedad_suelo == 0 ? "Húmedo" : "Seco";
        httpd_resp_send(req, estado, HTTPD_RESP_USE_STRLEN);
    }
    return ESP_OK;
}
