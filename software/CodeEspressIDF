#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_log.h"
#include "http_server.h"

static const char *TAG = "ESP_SERVER";

const char *ssid = "WifiNoha";
const char *password = "noha12345";

#define RELAY_PIN GPIO_NUM_2   // D1
#define SENSOR_PIN GPIO_NUM_4   // D2

void wifi_init(void);
void http_server_init(void);
void relay_control(int state);
int read_humidity_sensor(void);

void app_main(void) {
    nvs_flash_init();
    wifi_init();
    http_server_init();
    
    gpio_set_direction(RELAY_PIN, GPIO_MODE_OUTPUT);
    gpio_set_level(RELAY_PIN, 1); // Inicializar el relé en estado de "normalmente abierto" (NO)
}

void wifi_init(void) {
    esp_event_loop_create_default();
    
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(WIFI_IF_STA, &(wifi_config_t){
        .sta = {
            .ssid = "WifiNoha",
            .password = "noha12345",
        },
    });

    esp_wifi_start();
    esp_wifi_connect();
    ESP_LOGI(TAG, "Conectando a WiFi...");
}

void http_server_init(void) {
    // Inicializa el servidor HTTP
    start_http_server();
}

void relay_control(int state) {
    gpio_set_level(RELAY_PIN, state);
}

int read_humidity_sensor(void) {
    return gpio_get_level(SENSOR_PIN);
}

// Aquí se agregaría la implementación del servidor HTTP
void start_http_server(void) {
    httpd_handle_t server = NULL;

    httpd_config_t config = {
        .max_uri_handlers = 10,
        .stack_size = 4096,
        .server_port = 80,
        .ctrl_port = 32768,
        .task_priority = 5,
        .task_core = 1,
        .task_stack_size = 2048,
    };

    httpd_uri_t root_uri = {
        .uri = "/",
        .method = HTTP_GET,
        .handler = handle_root,
        .user_ctx = NULL
    };

    httpd_uri_t on_uri = {
        .uri = "/on",
        .method = HTTP_GET,
        .handler = handle_on,
        .user_ctx = NULL
    };

    httpd_uri_t off_uri = {
        .uri = "/off",
        .method = HTTP_GET,
        .handler = handle_off,
        .user_ctx = NULL
    };

    httpd_uri_t humedad_uri = {
        .uri = "/humedad",
        .method = HTTP_GET,
        .handler = handle_humedad,
        .user_ctx = NULL
    };

    // Iniciar el servidor
    if (httpd_start(&server, &config) == ESP_OK) {
        httpd_register_uri_handler(server, &root_uri);
        httpd_register_uri_handler(server, &on_uri);
        httpd_register_uri_handler(server, &off_uri);
        httpd_register_uri_handler(server, &humedad_uri);
    }
}

esp_err_t handle_root(httpd_req_t *req) {
    const char *html = "<html><body><h1>Control de Motor</h1>"
                       "<button onclick=\"location.href='/on'\">ON</button>"
                       "<button onclick=\"location.href='/off'\">OFF</button>"
                       "<h2>Humedad del Suelo: <span id='humedad'>Cargando...</span></h2>"
                       "<script>setInterval(function(){fetch('/humedad').then(response => response.text()).then(data => document.getElementById('humedad').innerText = data);}, 2000);</script>"
                       "</body></html>";
    
    httpd_resp_send(req, html, strlen(html));
    return ESP_OK;
}

esp_err_t handle_on(httpd_req_t *req) {
    relay_control(0); // Encender el relé
    httpd_resp_send(req, "Motor encendido", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_off(httpd_req_t *req) {
    relay_control(1); // Apagar el relé
    httpd_resp_send(req, "Motor apagado", HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

esp_err_t handle_humedad(httpd_req_t *req) {
    int humedadValor = read_humidity_sensor(); // Leer el estado del sensor
    ESP_LOGI(TAG, "Valor de humedad: %d", humedadValor);
    
    // Interpretar el valor digital: 0 es húmedo, 1 es seco
    const char *humedadEstado = (humedadValor == 1) ? "Seco" : "Húmedo";
    httpd_resp_send(req, humedadEstado, HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

